#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
lab_vlan.py: Host subclass that uses a VLAN tag for the default interface.

Dependencies:
    This class depends on the "vlan" package
    $ sudo apt-get install vlan

Usage :

    Directly running this script:
        sudo python lab_vlan.py

"""

from mininet.node import Host
from mininet.topo import Topo
from mininet.util import quietRun
from mininet.link import Intf
from mininet.log import error
import copy

class VLANHost( Host ):
    "Host connected to VLAN interface"

    def config( self, vlan, **params ):
        """Configure VLANHost according to (optional) parameters:
           vlan: VLAN ID for default interface"""

        r = super( VLANHost, self ).config( **params )

        intf = self.defaultIntf()
        print intf
        # remove IP from default, "physical" interface
        self.cmd( 'ifconfig %s inet 0' % intf )
        # create VLAN interface
        self.cmd( 'vconfig add %s %d' % ( intf, vlan ) )
        # assign the host's IP to the VLAN interface
        self.cmd( 'ifconfig %s.%d inet %s' % ( intf, vlan, params['ip'] ) )
        # update the intf name and host's intf map
        newName = '%s.%d' % ( intf, vlan )
        # update the (Mininet) interface to refer to VLAN interface name
        intf.name = newName
        # add VLAN interface to host's name to intf map
        self.nameToIntf[ newName ] = intf

        return r

class VLANRouter( Host ):
    "Router connected to VLAN interface"

    def config( self, vlans, **params ):
        r = super( VLANRouter, self ).config( **params )
        for i in vlans:
            intf = self.defaultIntf()
            print intf
            # remove IP from default, "physical" interface
            self.cmd( 'ifconfig %s inet 0' % intf )
            # create VLAN interface
            self.cmd( 'vconfig add %s %d' % ( intf, i ) )
            # assign the host's IP to the VLAN interface
            self.cmd( 'ifconfig %s.%d inet %s' % ( intf, i, params['ip'] ) )
            # update the intf name and host's intf map
            newName = '%s.%d' % ( intf, i )
            # update the (Mininet) interface to refer to VLAN interface name
            newintf = copy.copy(intf)
            newintf.name = newName
            # add VLAN interface to host's name to intf map
            self.nameToIntf[ newName ] = newintf

        # Enable forwarding on the router
        self.cmd( 'sysctl net.ipv4.ip_forward=1' )

        return r

    def terminate( self ):
        self.cmd( 'sysctl net.ipv4.ip_forward=0' )
        super( VLANRouter, self ).terminate()


hosts = { 'vlan': VLANHost }


# pylint: disable=arguments-differ

class VLANRouterTopo( Topo ):

    def build( self):
        s1, s2 = [ self.addSwitch( s ) for s in 's1', 's2' ]
        s1 = self.addSwitch( 's1' )
        h = self.addHost( "h1")
        self.addLink( h, s1 )
        h = self.addHost( "h2")
        self.addLink( h, s1 )
        h = self.addHost( "h3")
        self.addLink( h, s1 )
        h = self.addHost( "h4")
        self.addLink( h, s1 )
        h = self.addHost( 'h5' )
        self.addLink( h, s1 )
        h = self.addHost( 'h6' )
        self.addLink( h, s1 )
        r = self.addHost( "r1", cls=VLANRouter, vlans=[1,3] )
        self.addLink( r, s2 )
        self.addLink( s2, r, intfName2='r1-eth0.1')
        self.addLink( s2, r, intfName2='r1-eth0.3')
        r = self.addHost( "r2", cls=VLANRouter, vlans=[2,3] )
        self.addLink( r, s2 )
        self.addLink( s2, r, intfName2='r2-eth0.2')
        self.addLink( s2, r, intfName2='r2-eth0.3')
        self.addLink( s1, s2 )

def launchVLANRouterTopo():
    """Simple example that exercises a topo with VLAN"""

    net = Mininet( topo=VLANRouterTopo() )
    net.start()
    
    #En el caso de introducir configuraciÃ³n inicial hacerlo aquÃ­:    
    
    #net.get('h1').setIP(ip='X.X.X.X/Y',intf='h1-eth0')
    #net.get('r1').cmd('route add -net X.X.X.X/Y gw X.X.X.X');
    #net.get('h1').cmd('route add default gw X.X.X.X');
    
    CLI( net )
    net.stop()
    


if __name__ == '__main__':
    import sys
    from functools import partial

    from mininet.net import Mininet
    from mininet.cli import CLI
    from mininet.log import setLogLevel

    setLogLevel( 'info' )

    if not quietRun( 'which vconfig' ):
        error( "Cannot find command 'vconfig'\nThe package",
               "'vlan' is required in Ubuntu or Debian,",
               "or 'vconfig' in Fedora\n" )
        exit()

    launchVLANRouterTopo()
